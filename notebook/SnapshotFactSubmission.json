{
	"name": "SnapshotFactSubmission",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "batched",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/551f35f8-5023-4513-ae40-48f2e9f65fc6/resourceGroups/DUS02mem/providers/Microsoft.Synapse/workspaces/studentanalytics/bigDataPools/batched",
				"name": "batched",
				"type": "Spark",
				"endpoint": "https://studentanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/batched",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from datetime import datetime"
				],
				"attachments": null,
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def change_year_(date, Year):\r\n",
					"    return datetime(date).replace(year=Year)\r\n",
					"\r\n",
					"change_year = udf(change_year_, TimestampType())"
				],
				"attachments": null,
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = spark.read.load('abfss://datalake@dus02store.dfs.core.windows.net/fromAtlas/newsubmissionvgrades.json', format='json')"
				],
				"attachments": null,
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = subvgradeDF.drop('_id')\r\n",
					"subvgradeDF = subvgradeDF.distinct()"
				],
				"attachments": null,
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DimAssignment = spark.sql(\"SELECT * FROM `unisadw`.`dimassignment`\")\r\n",
					"DimDate = spark.sql(\"SELECT * FROM `unisadw`.`dimdate`\")\r\n",
					"DimGrade = spark.sql(\"SELECT * FROM `unisadw`.`dimgrade`\")\r\n",
					"DimStudent = spark.sql(\"SELECT * FROM `unisadw`.`dimstudent`\")\r\n",
					"DimTime = spark.sql(\"SELECT * FROM `unisadw`.`dimtime`\")"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = subvgradeDF.withColumnRenamed('Assessment Name', 'AssessmentName')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Course ID', 'CourseID')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Subject Area', 'SubjectArea')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Catalog Number', 'CatalogNumber')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Course Name', 'CourseName')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Term Code', 'TermCode')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Student ID', 'StudentID')\r\n",
					"subvgradeDF = subvgradeDF.withColumnRenamed('Grade Numeric', 'GradeNumeric')\r\n",
					""
				],
				"attachments": null,
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = subvgradeDF.withColumn('IndividualDueTime', to_timestamp(col(\"Student's Due Date\"), 'dd/MM/yyyy hh:mm:ss a'))\\\r\n",
					"                        .withColumn('IndividualDueTimeAlter', to_timestamp(col(\"Student's Due Date\"), 'dd/MM/yyyy HH:mm'))\r\n",
					"subvgradeDF = subvgradeDF.withColumn('IndividualDueTime', when(isnull(subvgradeDF.IndividualDueTime), subvgradeDF.IndividualDueTimeAlter)\r\n",
					"                                                            .otherwise(subvgradeDF.IndividualDueTime))\r\n",
					"subvgradeDF = subvgradeDF.withColumn('IndividualDueTime', when(year(subvgradeDF.IndividualDueTime) == 20, change_year(subvgradeDF.IndividualDueTime, lit(2020)))\r\n",
					"                                                            .otherwise(subvgradeDF.IndividualDueTime))\r\n",
					"\r\n",
					"subvgradeDF = subvgradeDF.withColumn('LastSubmissionTime', to_timestamp(col(\"Last Submission Time\"), 'dd/MM/yyyy hh:mm:ss a'))\\\r\n",
					"                        .withColumn('LastSubmissionTimeAlter', to_timestamp(col(\"Last Submission Time\"), 'dd/MM/yyyy HH:mm'))\r\n",
					"subvgradeDF = subvgradeDF.withColumn('LastSubmissionTime', when(isnull(subvgradeDF.LastSubmissionTime), subvgradeDF.LastSubmissionTimeAlter)\r\n",
					"                                                            .otherwise(subvgradeDF.LastSubmissionTime))\r\n",
					"subvgradeDF = subvgradeDF.withColumn('LastSubmissionTime', when((year(subvgradeDF.LastSubmissionTime) == 20) & subvgradeDF.LastSubmissionTime.isNotNull(), \r\n",
					"                                                                change_year(subvgradeDF.LastSubmissionTime, lit(2020)))\r\n",
					"                                                            .otherwise(subvgradeDF.LastSubmissionTime))"
				],
				"attachments": null,
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = subvgradeDF.join(DimAssignment, ['AssessmentName', 'CourseID', 'TermCode'], 'left')\\\r\n",
					"                        .join(DimStudent, [subvgradeDF.StudentID == DimStudent.StudentID, \r\n",
					"                                                subvgradeDF.TermCode >= DimStudent.EffectiveTerm,\r\n",
					"                                                subvgradeDF.TermCode < DimStudent.ExpiryTerm], 'left')\\\r\n",
					"                        .join(DimGrade, 'Grade', 'left')\\\r\n",
					"                        .select(subvgradeDF.GradeNumeric, subvgradeDF.IndividualDueTime, subvgradeDF.LastSubmissionTime,\r\n",
					"                                DimAssignment.AssignmentSK, DimStudent.StudentSK, DimGrade.GradeSK)"
				],
				"attachments": null,
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(subvgradeDF.where(year(subvgradeDF.LastSubmissionTime)==20).limit(10))"
				],
				"attachments": null,
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF.count()"
				],
				"attachments": null,
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = subvgradeDF.join(DimDate, to_date(subvgradeDF.IndividualDueTime) == DimDate.FullDateAlternateKey, 'left')\\\r\n",
					"                        .join(DimTime, [hour(subvgradeDF.IndividualDueTime) == DimTime.Hour,\r\n",
					"                                        minute(subvgradeDF.IndividualDueTime) == DimTime.Minute,\r\n",
					"                                        second(subvgradeDF.IndividualDueTime) == DimTime.Second], 'left')\\\r\n",
					"                        .select(subvgradeDF.GradeNumeric, subvgradeDF.IndividualDueTime, subvgradeDF.LastSubmissionTime,\r\n",
					"                                subvgradeDF.AssignmentSK, subvgradeDF.StudentSK, subvgradeDF.GradeSK,\r\n",
					"                                DimDate.DateKey.alias('IndividualDueDateSK'), DimTime.TimeSK.alias('IndividualDueTimeSK'))"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF = subvgradeDF.join(DimDate, to_date(subvgradeDF.LastSubmissionTime) == DimDate.FullDateAlternateKey, 'left')\\\r\n",
					"                        .join(DimTime, [hour(subvgradeDF.LastSubmissionTime) == DimTime.Hour,\r\n",
					"                                        minute(subvgradeDF.LastSubmissionTime) == DimTime.Minute,\r\n",
					"                                        second(subvgradeDF.LastSubmissionTime) == DimTime.Second], 'left')\\\r\n",
					"                        .select(subvgradeDF.GradeNumeric, subvgradeDF.IndividualDueTime, subvgradeDF.LastSubmissionTime,\r\n",
					"                                subvgradeDF.AssignmentSK, subvgradeDF.StudentSK, subvgradeDF.GradeSK,\r\n",
					"                                subvgradeDF.IndividualDueDateSK, subvgradeDF.IndividualDueTimeSK,\r\n",
					"                                DimDate.DateKey.alias('LastSubmissionDateSK'), DimTime.TimeSK.alias('LastSubmissionTimeSK'))"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"subvgradeDF.write.mode(\"overwrite\").saveAsTable(\"unisadw.snapshotfactsubmission\")"
				],
				"attachments": null,
				"execution_count": 11
			}
		]
	}
}