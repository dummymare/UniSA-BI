{
	"name": "SnapshotCourseEngagement",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "batched",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/551f35f8-5023-4513-ae40-48f2e9f65fc6/resourceGroups/DUS02mem/providers/Microsoft.Synapse/workspaces/studentanalytics/bigDataPools/batched",
				"name": "batched",
				"type": "Spark",
				"endpoint": "https://studentanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/batched",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = spark.read.load('abfss://datalake@dus02store.dfs.core.windows.net/fromAtlas/coursesitevisits.json', format='json')\r\n",
					"CourseVisitDF.printSchema()"
				],
				"attachments": null,
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF.count()"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = CourseVisitDF.drop('_id')\r\n",
					"CourseVisitDF = CourseVisitDF.distinct()\r\n",
					"CourseVisitDF.count()"
				],
				"attachments": null,
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Subject Area', 'SubjectArea')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Catalog Number', 'CatalogNumber')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Term Code', 'TermCode')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Student ID', 'StudentID')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Visit Count', 'VisitCount')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Engagement Count', 'EngagementCount')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Engagement Percentage', 'EngagementPercentage')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Current Grade', 'CurrentGrade')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Current Grade Letter', 'CurrentGradeLetter')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Official Grade', 'OfficialGrade')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Official Grade Letter', 'OfficialGradeLetter')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Last Course Login Date', 'LastCourseLoginDate')\r\n",
					"CourseVisitDF = CourseVisitDF.withColumnRenamed('Course ID', 'CourseID')"
				],
				"attachments": null,
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"factVideo = spark.read.options(header='True', inferSchema='True', delimiter=',')\\\r\n",
					"                .csv(\"abfss://datalake@dus02store.dfs.core.windows.net/reOrganized_v2/NewVideo/newVideoMerged_v2.csv\")\r\n",
					"DimDate = spark.sql(\"SELECT * FROM `unisadw`.`dimdate`\")\r\n",
					"DimGrade = spark.sql(\"SELECT * FROM `unisadw`.`dimgrade`\")\r\n",
					"DimStudent = spark.sql(\"SELECT * FROM `unisadw`.`dimstudent`\")\r\n",
					"DimTime = spark.sql(\"SELECT * FROM `unisadw`.`dimtime`\")\r\n",
					"DimCourse = spark.sql(\"SELECT * FROM `unisadw`.`dimcourse`\")"
				],
				"attachments": null,
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"factVideo = factVideo.withColumnRenamed('Student ID', 'StudentID')\r\n",
					"factVideo = factVideo.withColumnRenamed('Views and DownLoads', 'ViewsDownLoads')\r\n",
					"factVideo = factVideo.withColumnRenamed('Minutes Delivered', 'MinutesDelivered')\r\n",
					"factVideo = factVideo.withColumnRenamed('Average Minutes Delivered', 'AverageMinutesDelivered')\r\n",
					"\r\n",
					"factVideo = factVideo.select('StudentID', 'ViewsDownLoads', 'MinutesDelivered', 'AverageMinutesDelivered', 'degree', 'course', 'termYear')"
				],
				"attachments": null,
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"factVideo = factVideo.withColumn('StudyPeriod', regexp_extract(factVideo.termYear, r'SP(\\d?)', 1))\\\r\n",
					"                        .withColumn('Year', when(factVideo.termYear == 'UPDATED_INFT 1024 SP4 2020 NO Assessment Submission Data', 20)\r\n",
					"                                            .otherwise(regexp_extract(element_at(split(factVideo.termYear, '[_ ]'), -1), r'20(\\d+)', 1)))\r\n",
					"\r\n",
					"factVideo = factVideo.withColumn('TermCode', when(factVideo.StudyPeriod == '1', concat(factVideo.Year, lit('05')).cast(IntegerType()))\r\n",
					"                                            .when(factVideo.StudyPeriod == '3', concat(factVideo.Year, lit('12')).cast(IntegerType()))\r\n",
					"                                            .when(factVideo.StudyPeriod == '4', concat(factVideo.Year, lit('14')).cast(IntegerType()))\r\n",
					"                                            .when(factVideo.StudyPeriod == '6', concat(factVideo.Year, lit('25')).cast(IntegerType()))\r\n",
					"                                            .otherwise(None))"
				],
				"attachments": null,
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"factVideo = factVideo.filter(factVideo.TermCode.isNotNull())"
				],
				"attachments": null,
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"factVideo = factVideo.withColumn('course', when(factVideo.course == 'MENG1014', 'MENG 1014').otherwise(factVideo.course))"
				],
				"attachments": null,
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = CourseVisitDF.withColumn('LastLoginTime', to_timestamp(CourseVisitDF.LastCourseLoginDate, 'dd/MM/yyyy hh:mm:ss a'))"
				],
				"attachments": null,
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = CourseVisitDF.join(DimCourse, ['CourseID', 'TermCode'], 'left')\\\r\n",
					"                                .join(factVideo, [CourseVisitDF.StudentID == factVideo.StudentID,\r\n",
					"                                                CourseVisitDF.TermCode == factVideo.TermCode,\r\n",
					"                                                concat_ws(' ', CourseVisitDF.SubjectArea, CourseVisitDF.CatalogNumber.cast(StringType())) == factVideo.course], 'left')\\\r\n",
					"                                .join(DimStudent, [CourseVisitDF.StudentID == DimStudent.StudentID,\r\n",
					"                                                CourseVisitDF.TermCode >= DimStudent.EffectiveTerm,\r\n",
					"                                                CourseVisitDF.TermCode < DimStudent.ExpiryTerm], 'left')\\\r\n",
					"                                .join(DimDate, to_date(CourseVisitDF.LastLoginTime) == DimDate.FullDateAlternateKey, 'left')\\\r\n",
					"                                .join(DimTime, [hour(CourseVisitDF.LastLoginTime) == DimTime.Hour,\r\n",
					"                                            minute(CourseVisitDF.LastLoginTime) == DimTime.Minute,\r\n",
					"                                            second(CourseVisitDF.LastLoginTime) == DimTime.Second], 'left')\\\r\n",
					"                                .select(CourseVisitDF.VisitCount, CourseVisitDF.EngagementCount, CourseVisitDF.EngagementPercentage,\r\n",
					"                                        CourseVisitDF.CurrentGrade, CourseVisitDF.CurrentGradeLetter, CourseVisitDF.OfficialGrade,\r\n",
					"                                        CourseVisitDF.OfficialGradeLetter, CourseVisitDF.LastLoginTime, \r\n",
					"                                        factVideo.ViewsDownLoads, factVideo.MinutesDelivered, factVideo.AverageMinutesDelivered,\r\n",
					"                                        DimCourse.CourseSK, DimStudent.StudentSK, DimDate.DateKey.alias('LastLoginDateSK'),\r\n",
					"                                        DimTime.TimeSK.alias('LastLoginTimeSK'))"
				],
				"attachments": null,
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = CourseVisitDF.join(DimGrade, CourseVisitDF.CurrentGradeLetter == DimGrade.Grade, 'left')\\\r\n",
					"                            .select(CourseVisitDF.VisitCount, CourseVisitDF.EngagementCount, CourseVisitDF.EngagementPercentage,\r\n",
					"                                    CourseVisitDF.CurrentGrade, CourseVisitDF.OfficialGrade,\r\n",
					"                                    CourseVisitDF.OfficialGradeLetter, CourseVisitDF.LastLoginTime,\r\n",
					"                                    CourseVisitDF.CourseSK, CourseVisitDF.StudentSK, \r\n",
					"                                    CourseVisitDF.LastLoginDateSK, CourseVisitDF.LastLoginTimeSK,\r\n",
					"                                    CourseVisitDF.ViewsDownLoads, CourseVisitDF.MinutesDelivered, CourseVisitDF.AverageMinutesDelivered,\r\n",
					"                                    DimGrade.GradeSK.alias('CurrentGradeSK'))"
				],
				"attachments": null,
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF = CourseVisitDF.join(DimGrade, CourseVisitDF.OfficialGradeLetter == DimGrade.Grade, 'left')\\\r\n",
					"                            .select(CourseVisitDF.VisitCount, CourseVisitDF.EngagementCount, CourseVisitDF.EngagementPercentage,\r\n",
					"                                    CourseVisitDF.CurrentGrade, CourseVisitDF.OfficialGrade, CourseVisitDF.LastLoginTime,\r\n",
					"                                    CourseVisitDF.ViewsDownLoads, CourseVisitDF.MinutesDelivered, CourseVisitDF.AverageMinutesDelivered,\r\n",
					"                                    CourseVisitDF.CourseSK, CourseVisitDF.StudentSK, \r\n",
					"                                    CourseVisitDF.LastLoginDateSK, CourseVisitDF.LastLoginTimeSK, CourseVisitDF.CurrentGradeSK,\r\n",
					"                                    DimGrade.GradeSK.alias('OfficialGradeSK'))"
				],
				"attachments": null,
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CourseVisitDF.count()"
				],
				"attachments": null,
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CourseVisitDF.write.mode(\"overwrite\").saveAsTable(\"unisadw.snapshotengagement\")"
				],
				"attachments": null,
				"execution_count": 65
			}
		]
	}
}