{
	"name": "DimResource",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "batched",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/551f35f8-5023-4513-ae40-48f2e9f65fc6/resourceGroups/DUS02mem/providers/Microsoft.Synapse/workspaces/studentanalytics/bigDataPools/batched",
				"name": "batched",
				"type": "Spark",
				"endpoint": "https://studentanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/batched",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.window import Window\r\n",
					"w = Window.orderBy(\"ActivityResourceName\")"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DimResource = spark.sql(\"SELECT * FROM `unisadw`.`dimcourseresource`\")\r\n",
					"logDF = spark.read.load('abfss://datalake@dus02store.dfs.core.windows.net/fromAtlas/NewLog.json', format='json')\r\n",
					"DimCourse = spark.sql(\"SELECT * FROM `unisadw`.`dimcourse`\")"
				],
				"attachments": null,
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.withColumn('course', regexp_extract(upper(logDF.filename), r'NEWLOG(LOGS)?_?([A-Z]{4}\\s\\d{4})', 2))\r\n",
					"logDF = logDF.withColumn('StudyPeriod', regexp_extract(upper(logDF.filename), r'NEWLOG(LOGS)?_?([A-Z]{4}\\s\\d{4})\\s?_?(SP\\d{1})', 3))\r\n",
					"logDF = logDF.withColumn('Year', when(col('filename')=='NEWLoglogs_MATH 1077 SP3021_20210925-1114.csv', '2021')\r\n",
					"                                .otherwise(regexp_extract(upper(logDF.filename), r'NEWLOG(LOGS)?_?([A-Z]{4}\\s\\d{4})\\s?_?(SP\\d{1})\\s?(\\d{4})', 4)))\r\n",
					"logDF = logDF.withColumn('TermCode', when(col('StudyPeriod') == 'SP1', concat(substring(col('Year'), 3, 2), lit('05')))\r\n",
					"                                    .when(col('StudyPeriod') == 'SP3', concat(substring(col('Year'), 3, 2), lit('12')))\r\n",
					"                                    .when(col('StudyPeriod') == 'SP4', concat(substring(col('Year'), 3, 2), lit('14')))\r\n",
					"                                    .when(col('StudyPeriod') == 'SP6', concat(substring(col('Year'), 3, 2), lit('25'))))"
				],
				"attachments": null,
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.withColumn('TimeFormed', to_timestamp(col('Time'), 'dd/MM/yy, HH:mm'))\r\n",
					"logDF = logDF.withColumn('DateFormed', to_date(logDF.TimeFormed))\r\n",
					"logDF = logDF.filter(logDF.TimeFormed.isNotNull())"
				],
				"attachments": null,
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.withColumn('ActivityResourceType', when(trim(split(col('Event context'), ':').getItem(0)) == 'Other', col('Component'))\r\n",
					"                                                .when(trim(split(col('Event context'), ':').getItem(0)) == 'Course', col('Component'))\r\n",
					"                                                .otherwise(trim(split(col('Event context'), ':').getItem(0))))"
				],
				"attachments": null,
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.withColumn('ActivityResourceName', trim(split(col('Event context'), ':').getItem(1)))"
				],
				"attachments": null,
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.groupBy(['ActivityResourceName', 'ActivityResourceType', 'course', 'TermCode', 'Year']).count()\\\r\n",
					"            .withColumn('SubjectArea', trim(split(col('course'), ' ').getItem(0)))\\\r\n",
					"            .withColumn('CatalogNumber', trim(split(col('course'), ' ').getItem(1)))"
				],
				"attachments": null,
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.select('ActivityResourceName', 'ActivityResourceType', 'SubjectArea', 'CatalogNumber', 'TermCode', 'Year')\\\r\n",
					"            .exceptAll(DimResource.select('ActivityResourceName', 'ActivityResourceType', 'SubjectArea', 'CatalogNumber', 'TermCode', 'Year'))"
				],
				"attachments": null,
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF = logDF.join(DimCourse, ['SubjectArea', 'CatalogNumber', 'TermCode'], 'left')\\\r\n",
					"            .select('ActivityResourceName', 'ActivityResourceType', 'SubjectArea', 'CatalogNumber', 'TermCode', logDF.Year, \r\n",
					"                    DimCourse.CourseSK, DimCourse.CourseID, DimCourse.CourseName, DimCourse.STEMfield)\\\r\n",
					"            .withColumn('AssessmentMethod', lit(None))"
				],
				"attachments": null,
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DimResource = DimResource.select('CourseID', 'TermCode', 'Year', 'ActivityResourceName', 'ActivityResourceType', \r\n",
					"                                'AssessmentMethod', 'CatalogNumber', 'CourseName', 'SubjectArea', 'STEMfield', 'CourseSK')\\\r\n",
					"                        .union(logDF.select('CourseID', 'TermCode', 'Year', 'ActivityResourceName', 'ActivityResourceType', \r\n",
					"                                            'AssessmentMethod', 'CatalogNumber', 'CourseName', 'SubjectArea', 'STEMfield', 'CourseSK'))\\\r\n",
					"                        .withColumn('ResourceSK', row_number().over(w))"
				],
				"attachments": null,
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DimResource.count()"
				],
				"attachments": null,
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logDF.count()"
				],
				"attachments": null,
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DimResource.write.mode(\"overwrite\").saveAsTable(\"default.dimcourseresource\")"
				],
				"attachments": null,
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DimResource.printSchema()"
				],
				"attachments": null,
				"execution_count": 46
			}
		]
	}
}